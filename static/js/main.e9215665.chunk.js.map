{"version":3,"sources":["components/Header.js","apikey.js","components/Widget.js","components/StockChart.js","components/Chart.js","components/ResultRow.js","components/blackscholes.js","components/Result.js","components/Body.js","index.js"],"names":["Header","class","widgetType","TICKER_TAPE","widgetConfig","marketstackkey","Widget","stockdata","useState","showsymbol","setShowsymbol","console","log","symbol","SYMBOL_OVERVIEW","canvasGradient","createVerticalLinearGradient","stop","color","hexToRGBA","AreaChart","this","props","data","type","width","ratio","height","margin","left","right","top","bottom","seriesName","xAccessor","d","date","xScale","scaleTime","xExtents","Date","id","yExtents","close","x1","y1","x2","y2","offset","stopColor","stopOpacity","axisAt","orient","ticks","yAccessor","fill","strokeWidth","interpolation","curveMonotoneX","React","Component","defaultProps","fitWidth","Chart","ticker","setStockprice","stockprice","setStockdata","useEffect","axios","get","toUpperCase","then","response","catch","err","name","stock_exchange","acronym","ResultRow","rank","option","estimatedreturn","strArray","description","split","includes","subStrIdx","indexOf","substring","length","closePrice","stdNormCDF","x","probability","i","Math","pow","_doubleFactorial","E","sqrt","PI","n","val","blackScholes","s","k","t","v","r","callPut","w","toLowerCase","calcreturn","estprice","dateutc","UTC","getFullYear","getMonth","getDate","timetoexp","expirationDate","optionprice","bid","ask","strikePrice","theoreticalVolatility","putCall","Result","pricestring","currentprice","optiondata","setOptiondata","price","parseFloat","isNaN","status","alloptions","expdate","callExpDateMap","hasOwnProperty","strike","curoption","push","putExpDateMap","sort","a","b","reverse","topoptions","slice","map","element","index","toFixed","Body","searchtext","setSearchtext","selectedtext","setSelectedtext","expprice","setExpprice","setDate","selectedexpprice","setSelectedexpprice","selecteddate","setSelecteddate","value","placeholder","onChange","e","target","onClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e9215665.chunk.js","sourcesContent":["\r\nimport './../style/headerstyle.css'\r\n\r\nimport {TradingViewEmbed, widgetType} from \"react-tradingview-embed\"\r\n\r\nconst Header = () => {\r\n\r\n    \r\n    return (\r\n        <div class=\"widget\">\r\n            {\r\n            <TradingViewEmbed \r\n                widgetType={widgetType.TICKER_TAPE}\r\n                widgetConfig={{\r\n                    \"colorTheme\": \"dark\",\r\n                    \"symbols\": [\r\n                        {\r\n                        \"proName\": \"FOREXCOM:SPXUSD\",\r\n                        \"title\": \"S&P 500\"\r\n                        },\r\n                        {\r\n                        \"proName\": \"FOREXCOM:NSXUSD\",\r\n                        \"title\": \"Nasdaq 100\"\r\n                        },\r\n                        {\r\n                        \"description\": \"Capital One\",\r\n                        \"proName\": \"NYSE:COF\"\r\n                        },\r\n                        {\r\n                        \"description\": \"Leidos\",\r\n                        \"proName\": \"NYSE:LDOS\"\r\n                        },\r\n                        {\r\n                        \"description\": \"Northrop Grumman\",\r\n                        \"proName\": \"NYSE:NOC\"\r\n                        },\r\n                        {\r\n                        \"description\": \"Google\",\r\n                        \"proName\": \"NASDAQ:GOOGL\"\r\n                        }\r\n                    ]\r\n                }}\r\n            />}\r\n            {/*\r\n        <div class='header'>\r\n            <p>SPX: 3974.55</p>\r\n            <p>NDX: 12979.1</p>\r\n            <p>DJI: 33072.9</p>\r\n            <p>VIX: 18.86</p>\r\n            <p>DXY: 92.766</p>\r\n            </div>*/}\r\n        </div>\r\n\r\n        \r\n    )\r\n}\r\n\r\nexport default Header","\r\nconst marketstackkey = \"6472293afaf57688dc0ed3f907a71858\"\r\nconst tdkey = \"ZS8CKW5TX4Y4FAFZYUV7SW7ADSAGGVUR\"\r\n\r\nexport {marketstackkey,tdkey}","import {TradingViewEmbed, widgetType} from \"react-tradingview-embed\"\r\nimport {useState} from 'react'\r\n\r\nconst Widget = ({stockdata}) => {\r\n    const [showsymbol,setShowsymbol] = useState()\r\n    \r\n    console.log(stockdata)\r\n    console.log(stockdata.symbol)\r\n    \r\n    if(stockdata.symbol !== showsymbol){\r\n        console.log(\"hello\")\r\n        setShowsymbol(stockdata.symbol)\r\n        return (\r\n            <div >\r\n                \r\n    \r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div class=\"widget\">\r\n            <TradingViewEmbed \r\n                widgetType={widgetType.SYMBOL_OVERVIEW}\r\n                widgetConfig={{\r\n                    \"symbols\": [[\r\n                        showsymbol,\r\n                        showsymbol\r\n                    ]]\r\n                    \r\n                }}\r\n            />\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Widget","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { scaleTime } from \"d3-scale\";\r\nimport { curveMonotoneX } from \"d3-shape\";\r\n\r\nimport { ChartCanvas, Chart } from \"react-stockcharts\";\r\nimport { AreaSeries } from \"react-stockcharts/lib/series\";\r\nimport { XAxis, YAxis } from \"react-stockcharts/lib/axes\";\r\nimport { fitWidth } from \"react-stockcharts/lib/helper\";\r\nimport { createVerticalLinearGradient, hexToRGBA } from \"react-stockcharts/lib/utils\";\r\n\r\nconst canvasGradient = createVerticalLinearGradient([\r\n\t{ stop: 0, color: hexToRGBA(\"#b5d0ff\", 0.2) },\r\n\t{ stop: 0.7, color: hexToRGBA(\"#6fa4fc\", 0.4) },\r\n\t{ stop: 1, color: hexToRGBA(\"#4286f4\", 0.8) },\r\n]);\r\n\r\nclass AreaChart extends React.Component {\r\n\trender() {\r\n        console.log(\"in chart\")\r\n\t\tconsole.log(this.props)\r\n\t\tconst { data, type, width, ratio } = this.props;\r\n\t\treturn (\r\n\t\t\t<ChartCanvas ratio={ratio} width={width} height={400}\r\n\t\t\t\tmargin={{ left: 50, right: 50, top: 10, bottom: 30 }}\r\n\t\t\t\tseriesName=\"MSFT\"\r\n\t\t\t\tdata={data} type={type}\r\n\t\t\t\txAccessor={d => d.date}\r\n\t\t\t\txScale={scaleTime()}\r\n\t\t\t\txExtents={[new Date(2011, 0, 1), new Date(2013, 0, 2)]}\r\n\t\t\t>\r\n\t\t\t\t<Chart id={0} yExtents={d => d.close}>\r\n\t\t\t\t\t<defs>\r\n\t\t\t\t\t\t<linearGradient id=\"MyGradient\" x1=\"0\" y1=\"100%\" x2=\"0\" y2=\"0%\">\r\n\t\t\t\t\t\t\t<stop offset=\"0%\" stopColor=\"#b5d0ff\" stopOpacity={0.2} />\r\n\t\t\t\t\t\t\t<stop offset=\"70%\" stopColor=\"#6fa4fc\" stopOpacity={0.4} />\r\n\t\t\t\t\t\t\t<stop offset=\"100%\"  stopColor=\"#4286f4\" stopOpacity={0.8} />\r\n\t\t\t\t\t\t</linearGradient>\r\n\t\t\t\t\t</defs>\r\n\t\t\t\t\t<XAxis axisAt=\"bottom\" orient=\"bottom\" ticks={6}/>\r\n\t\t\t\t\t<YAxis axisAt=\"left\" orient=\"left\" />\r\n\t\t\t\t\t<AreaSeries\r\n\t\t\t\t\t\tyAccessor={d => d.close}\r\n\t\t\t\t\t\tfill=\"url(#MyGradient)\"\r\n\t\t\t\t\t\tstrokeWidth={2}\r\n\t\t\t\t\t\tinterpolation={curveMonotoneX}\r\n\t\t\t\t\t\tcanvasGradient={canvasGradient}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Chart>\r\n\t\t\t</ChartCanvas>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n\r\nAreaChart.propTypes = {\r\n\tdata: PropTypes.array.isRequired,\r\n\twidth: PropTypes.number.isRequired,\r\n\tratio: PropTypes.number.isRequired,\r\n\ttype: PropTypes.oneOf([\"svg\", \"hybrid\"]).isRequired,\r\n};\r\n\r\nAreaChart.defaultProps = {\r\n\ttype: \"svg\",\r\n};\r\nAreaChart = fitWidth(AreaChart);\r\n\r\nexport default AreaChart;","import {useState,useEffect} from 'react'\r\nimport {TradingViewEmbed, widgetType} from \"react-tradingview-embed\"\r\n\r\nimport axios from 'axios'\r\n\r\nimport {marketstackkey,tdkey} from \"./../apikey.js\"\r\n\r\nimport Widget from \"./Widget\"\r\nimport AreaChart from \"./StockChart\"\r\nimport './../style/chartstyle.css'\r\n\r\nconst Chart = ({ticker,stockprice,setStockprice}) => {\r\n    const [stockdata,setStockdata] = useState({\r\n        'name':'nostock'\r\n    })\r\n    const [stockchartdata,setStockchartdata] = useState([])\r\n    //const [stockprice,setStockprice] = useState(-1)\r\n    useEffect(() => {\r\n        console.log('effect ' + ticker + ' ' + marketstackkey)\r\n        axios\r\n            .get('http://api.marketstack.com/v1/tickers/'+ticker.toUpperCase()+'?access_key=' + marketstackkey)\r\n            .then(response => {\r\n                console.log(response.data)\r\n                setStockdata(response.data)\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    }, [ticker])\r\n\r\n    useEffect(() => {\r\n        console.log('effect2 ' + ticker)\r\n        axios\r\n            .get('http://api.marketstack.com/v1/tickers/'+ticker.toUpperCase()+'/eod/latest?access_key=' + marketstackkey)\r\n            .then(response => {\r\n                console.log(response.data.close)\r\n                setStockprice(response.data.close)\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    }, [ticker])\r\n    /*\r\n    useEffect(() => {\r\n        console.log('chart data effect ' + ticker)\r\n        axios\r\n            .get('http://api.marketstack.com/v1/eod?access_key='+marketstackkey+'&symbols='+ticker.toUpperCase()+'&date_from=2020-03-27&limit=365')\r\n            .then(response => {\r\n                //console.log(response.data.data)\r\n                setStockchartdata(response.data.data)\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    }, [ticker])\r\n    console.log(stockchartdata)*/\r\n    if(stockdata.name === 'nostock') return (<div></div>)\r\n\r\n    return (\r\n        <div class='chart'>\r\n            <h1>{stockdata.name} ({stockdata.stock_exchange.acronym}:{stockdata.symbol})</h1>\r\n            {/*<h3>Current Price: ${stockprice}</h3>*/}\r\n\r\n            {/*<div class=\"widget\">\r\n                <TradingViewEmbed \r\n                    widgetType={widgetType.SYMBOL_OVERVIEW}\r\n                    widgetConfig={{\r\n                        \"symbols\": [[\r\n                            stockdata.symbol,\r\n                            stockdata.symbol\r\n                        ]]\r\n                        \r\n                    }}\r\n                />\r\n\r\n                </div>*/}\r\n\r\n            <Widget stockdata={stockdata}/>\r\n\r\n            {/*<AreaChart type=\"svg\" data={stockchartdata} />*/}\r\n        </div>\r\n        \r\n    )\r\n\r\n    \r\n\r\n\r\n}\r\n\r\nexport default Chart","import '../style/ResultRow.css'\r\n\r\nconst ResultRow = ({rank,option,estimatedreturn}) => {\r\n\r\n\tvar strArray = option.description.split(\" \")\r\n\tif(!strArray[4].includes(\".\")) {\r\n\t\tstrArray[4] += \".00\";\r\n\t}\r\n\tvar subStrIdx = strArray[4].indexOf(\".\")\r\n\tif(strArray[4].substring(subStrIdx).length < 3) {\r\n\t\tstrArray[4] += \"0\"\r\n\t}\r\n\t//console.log(strArray[6])\r\n\t// if(strArray[6].substring(0, 1) == \"(\") {\r\n\t// \tstrArray[5] += strArray[6];\r\n\t// \tstrArray[6] = strArray[7];\r\n\t// }\r\n    return (\r\n        <div class='row'>\r\n            {/*\r\n            <table>\r\n                \r\n                \r\n                <colgroup>\r\n                    <col span=\"1\" style=\"width: 10%;\" />\r\n                    <col span=\"1\" style=\"width: 10%;\"/>\r\n                    <col span=\"1\" style=\"width: 10%;\"/>\r\n                    <col span=\"1\" style=\"width: 10%;\"/>\r\n                    <col span=\"1\" style=\"width: 10%;\"/>\r\n                    <col span=\"1\" style=\"width: 10%;\"/>\r\n                    <col span=\"1\" style=\"width: 10%;\"/>\r\n    </colgroup>\r\n                <tbody>\r\n                    <tr>\r\n                        <td>{strArray[0]}</td>\r\n                        <td>{strArray[1]}</td>\r\n                        <td>{strArray[2]}</td>\r\n                        <td>{strArray[3]}</td>\r\n                        <td>{strArray[4]}</td>\r\n                        <td>{estimatedreturn}%</td>\r\n                        <td>{option.closePrice}</td>\r\n                        <td>{strArray[5]}</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>*/}\r\n\r\n                        <p>{strArray[0]}</p>\r\n                        <p>{strArray[1]+' '+strArray[2]+' '+strArray[3]}</p>\r\n                        <p>{strArray[4]}</p>\r\n                        <p>{estimatedreturn}%</p>\r\n                        <p>{option.closePrice}</p>\r\n                        <p>{strArray[5]}</p>\r\n\r\n            {/*}\r\n            <p class='row'>{strArray[0]}&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;{strArray[1]} {strArray[2]}, {strArray[3]}\r\n            &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;{strArray[4]}\r\n            &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;{estimatedreturn}%\r\n            &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;{strArray[5]}\r\n            &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;{strArray[6]}\r\n    </p>*/}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ResultRow","/**\r\n * Black-Scholes option pricing formula and supporting statistical functions.\r\n * From: https://www.npmjs.com/package/black-scholes\r\n */\r\n\r\n/**\r\n * Standard normal cumulative distribution function.  The probability is estimated\r\n * by expanding the CDF into a series using the first 100 terms.\r\n * See {@link http://en.wikipedia.org/wiki/Normal_distribution#Cumulative_distribution_function|Wikipedia page}.\r\n *\r\n * @param {Number} x The upper bound to integrate over.  This is P{Z <= x} where Z is a standard normal random variable.\r\n * @returns {Number} The probability that a standard normal random variable will be less than or equal to x\r\n */\r\n const  stdNormCDF = (x) => {\r\n    var probability = 0;\r\n    // avoid divergence in the series which happens around +/-8 when summing the\r\n    // first 100 terms\r\n    if (x >= 8) {\r\n        probability = 1;\r\n    }\r\n    else if (x <= -8) {\r\n        probability = 0;\r\n    }\r\n    else {\r\n        for (var i = 0; i < 100; i++) {\r\n            probability += (Math.pow(x, 2 * i + 1) / _doubleFactorial(2 * i + 1));\r\n        }\r\n        probability *= Math.pow(Math.E, -0.5 * Math.pow(x, 2));\r\n        probability /= Math.sqrt(2 * Math.PI);\r\n        probability += 0.5;\r\n    }\r\n    return probability;\r\n}\r\n\r\n/**\r\n * Double factorial.  See {@link http://en.wikipedia.org/wiki/Double_factorial|Wikipedia page}.\r\n * @private\r\n *\r\n * @param {Number} n The number to calculate the double factorial of\r\n * @returns {Number} The double factorial of n\r\n */\r\nfunction _doubleFactorial(n) {\r\n    var val = 1;\r\n    for (var i = n; i > 1; i -= 2) {\r\n        val *= i;\r\n    }\r\n    return val;\r\n}\r\n\r\n/**\r\n * Black-Scholes option pricing formula.\r\n * See {@link http://en.wikipedia.org/wiki/Black%E2%80%93Scholes_model#Black-Scholes_formula|Wikipedia page}\r\n * for pricing puts in addition to calls.\r\n *\r\n * @param   {Number} s       Current price of the underlying\r\n * @param   {Number} k       Strike price\r\n * @param   {Number} t       Time to experiation in years\r\n * @param   {Number} v       Volatility as a decimal\r\n * @param   {Number} r       Anual risk-free interest rate as a decimal\r\n * @param   {String} callPut The type of option to be priced - \"call\" or \"put\"\r\n * @returns {Number}         Price of the option\r\n */\r\nconst blackScholes = (s, k, t, v, r, callPut) => {\r\n    var price = null;\r\n    var w = (r * t + Math.pow(v, 2) * t / 2 - Math.log(k / s)) / (v * Math.sqrt(t));\r\n    if (callPut.toLowerCase() === \"call\") {\r\n        price = s * stdNormCDF(w) - k * Math.pow(Math.E, -1 * r * t) * stdNormCDF(w - v * Math.sqrt(t));\r\n    }\r\n    else // put\r\n    {\r\n        price = k * Math.pow(Math.E, -1 * r * t) * stdNormCDF(v * Math.sqrt(t) - w) - s * stdNormCDF(-w);\r\n    }\r\n    return price;\r\n}\r\n\r\n/**\r\n * Calcuate omega as defined in the Black-Scholes formula.\r\n *\r\n * @param   {Number} s Current price of the underlying\r\n * @param   {Number} k Strike price\r\n * @param   {Number} t Time to experiation in years\r\n * @param   {Number} v Volatility as a decimal\r\n * @param   {Number} r Anual risk-free interest rate as a decimal\r\n * @returns {Number} The value of omega\r\n */\r\nfunction getW(s, k, t, v, r) {\r\n    var w = (r * t + Math.pow(v, 2) * t / 2 - Math.log(k / s)) / (v * Math.sqrt(t));\r\n    return w;\r\n}\r\n\r\n//for newly added volatility code\r\nclass Option {\r\n    constructor(s, k, t, r, p, callPut) {\r\n        this.s = s;\r\n        this.k = k;\r\n        this.t = t;\r\n        this.r = r;\r\n        this.p = p; //actual option price\r\n        this.callPut = callPut;\r\n    }\r\n}\r\n\r\nconst  getVolatility = (option) => {\r\n    var i;\r\n    var v = 0;\r\n    var price = null;\r\n    var difference = 1000000000;\r\n    for (i = 0; i <= 1; i += 0.001) {\r\n        //var w = (option.r * option.t + Math.pow(i, 2) * option.t / 2 - Math.log(option.k / option.s)) / (i * Math.sqrt(option.t));\r\n        if (option.callPut === \"call\") {\r\n            //price = option.s * stdNormCDF(w) - option.k * Math.pow(Math.E, -1 * option.r * option.t) * stdNormCDF(w - i * Math.sqrt(option.t));\r\n            price = blackScholes(option.s,option.k,option.t,i,option.r,\"call\")\r\n            if (Math.abs(price - option.p) < difference) {\r\n                difference = Math.abs(price - option.p);\r\n                v = i;\r\n            }\r\n        }/*\r\n        else // put\r\n        {\r\n            price = option.k * Math.pow(Math.E, -1 * option.r * option.t) * stdNormCDF(i * Math.sqrt(option.t) - w) - option.s * stdNormCDF(-w);\r\n            if (Math.abs(price - option.p) < difference) {\r\n                difference = Math.abs(price - option.p);\r\n                v = i;\r\n            }\r\n        }*/\r\n    }\r\n    console.log('difference ' + difference)\r\n    return v;\r\n}\r\n/*\r\nmodule.exports = {\r\n    blackScholes: blackScholes,\r\n    stdNormCDF: stdNormCDF,\r\n    getW: getW\r\n};*/\r\n\r\n//console.log(blackScholes(30, 34, .25, .2, .08, \"call\"));\r\n//let op = new Option(30, 34, .25, .08, 0.238349, \"call\");\r\n//console.log(getVolatility(op));\r\n\r\n//console.log(blackScholes(30, 34, .25, .2, .08, \"put\"));\r\n//let op2 = new Option(30, 34, .25, .08, 3.5651, \"put\");\r\n//console.log(getVolatility(op2));\r\n/*\r\nlet op3 = new Option(2024.73, 900, .0548, .03, 1126.208, \"call\");\r\nconsole.log(getVolatility(op3));\r\nconsole.log(blackScholes(2024.73,900,0.0548,0.29,.03,\"call\"))\r\n*/\r\n\r\nexport default blackScholes","import {useState,useEffect} from 'react'\r\n\r\nimport axios from 'axios'\r\n\r\nimport ResultRow from './ResultRow'\r\n\r\nimport blackScholes from './blackscholes'\r\nimport {marketstackkey,tdkey} from \"./../apikey.js\"\r\nimport '../style/Result.css'\r\nimport '../style/ResultRow.css'\r\n\r\nconst MS_PER_YEAR = 1000*60*60*24*365\r\n\r\nconst calcreturn = (option,estprice,date) => {\r\n    const dateutc = Date.UTC(date.getFullYear(), date.getMonth(), date.getDate())\r\n    const timetoexp = (option.expirationDate-dateutc)/MS_PER_YEAR\r\n    const optionprice = (option.bid+option.ask)/2\r\n    return (blackScholes(estprice,option.strikePrice,timetoexp,option.theoreticalVolatility/100.0,0.027,option.putCall)/optionprice-1)*100\r\n}\r\n\r\nconst Result = ({ticker,pricestring,date,currentprice}) => {\r\n    const [optiondata,setOptiondata] = useState({\r\n        \"symbol\":\"nostock\",\r\n        \"status\":\"FAILED\"\r\n    })\r\n\r\n    useEffect(() => {\r\n        console.log('effect')\r\n        axios\r\n            .get('https://api.tdameritrade.com/v1/marketdata/chains?apikey='+tdkey+'&symbol='+ticker.toUpperCase()+'&fromDate='+date)\r\n            .then(response => {\r\n                console.log(response.data)\r\n                setOptiondata(response.data)\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    }, [ticker,date])\r\n\r\n\r\n    if(ticker === '' || pricestring === '' || date==='') return (<div></div>)\r\n    \r\n    const price = parseFloat(pricestring)\r\n    if(isNaN(price)) return (<div><p>Non-numeric value for price</p></div>)\r\n\r\n    if(optiondata.symbol === 'nostock') return (<div></div>)\r\n\r\n    if(optiondata.status === 'FAILED') return (<div>Failed to retreive options data</div>)\r\n\r\n    let alloptions = []\r\n    for(let expdate in optiondata.callExpDateMap){\r\n        //console.log(expdate)\r\n        if(!optiondata.callExpDateMap.hasOwnProperty(expdate)) continue\r\n        for(let strike in optiondata.callExpDateMap[expdate]){\r\n            //console.log(strike)\r\n            for(let k = 0; k < optiondata.callExpDateMap[expdate][strike].length; k++){\r\n                const curoption = optiondata.callExpDateMap[expdate][strike][k]\r\n                if(curoption.ask === 0 || curoption.bid === 0 || curoption.closePrice === 0) continue\r\n                alloptions.push({\r\n                    \"option\":curoption,\r\n                    \"estimatedreturn\":calcreturn(curoption,price,new Date(date))\r\n                })\r\n            }\r\n            for(let k = 0; k < optiondata.putExpDateMap[expdate][strike].length; k++){\r\n                const curoption = optiondata.putExpDateMap[expdate][strike][k]\r\n                if(curoption.ask === 0 || curoption.bid === 0 || curoption.closePrice === 0) continue\r\n                alloptions.push({\r\n                    \"option\":curoption,\r\n                    \"estimatedreturn\":calcreturn(curoption,price,new Date(date))\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    alloptions.sort((a,b) => {\r\n        return a.estimatedreturn-b.estimatedreturn\r\n    }).reverse()\r\n\r\n    let topoptions = alloptions.slice(0,10);\r\n    //console.log(topoptions[0].option)\r\n\r\n    //console.log(topoptions)\r\n    return (\r\n        <div class='results'>\r\n            <div class='row'>\r\n                {/*\r\n                <table>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>Stock</td>\r\n                            <td>Expiration Date</td>\r\n                            <td>Strike Price</td>\r\n                            <td>Estimated Return</td>\r\n                            <td>Premium</td>\r\n                            <td>Call/Put</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>*/}\r\n                <p>Stock</p>\r\n                <p>Expiration Date</p>\r\n                <p>Strike Price</p>\r\n                <p>Estimated Return</p>\r\n                <p>Premium</p>\r\n                <p>Call/Put</p>\r\n            </div>\r\n            \r\n            {/*\r\n            Stock&emsp;&emsp;&emsp;&emsp;Time to Maturity&emsp;&emsp;&emsp;&emsp;Strike Price&emsp;&emsp;&emsp;&emsp;Estimated Return&emsp;&emsp;&emsp;&emsp;Option Price&emsp;&emsp;&emsp;&emsp;Call/Put</div>\r\n            */}\r\n            {topoptions.map((element, index) => (\r\n                <ResultRow rank={index+1} option={element.option} estimatedreturn={element.estimatedreturn.toFixed(2)} />\r\n                \r\n            ))}\r\n            {/*{alloptions.length === 0 && <p>No Options Found for this Stock</p>}*/}\r\n        </div>\r\n        \r\n    )\r\n\r\n    \r\n\r\n\r\n}\r\n\r\nexport default Result","import {useState,useEffect} from 'react'\r\nimport axios from 'axios'\r\n\r\nimport Chart from \"./Chart\"\r\nimport Result from \"./Result\"\r\n\r\nimport marketstackkey from \"./../apikey\"\r\n\r\nimport '../style/bodystyle.css'\r\n\r\nconst Body = () => {\r\n    const [searchtext,setSearchtext] = useState(\"\")\r\n    const [selectedtext,setSelectedtext] = useState(\"\")\r\n    \r\n    const [expprice,setExpprice] = useState(\"\")\r\n    const [date,setDate] = useState(\"\")\r\n\r\n    const [selectedexpprice,setSelectedexpprice] = useState(\"\")\r\n    const [selecteddate,setSelecteddate] = useState(\"\")\r\n    \r\n    const [stockprice,setStockprice] = useState(-1)\r\n\r\n    const submitparams = () => {\r\n        setSelectedexpprice(expprice)\r\n        setSelecteddate(date)\r\n    }\r\n\r\n    const showstock = () => {\r\n        setSelectedtext(searchtext)\r\n        //window.location.reload()\r\n    }\r\n\r\n    return (\r\n        <div class='body'>\r\n            \r\n            <div class='toppart'>\r\n                <h1 class='title'>Opt-Win</h1>\r\n                <h2 class='subtitle'>Find the most optimal options here!</h2>\r\n            </div>\r\n\r\n            <div>\r\n                \r\n                    <input class='searchbox' type='text' value={searchtext} placeholder='Search any ticker' onChange={(e) => {setSearchtext(e.target.value)}} />\r\n                    <button class='submitsearch' onClick={() => {showstock()}}>Show</button>     \r\n                \r\n                \r\n            </div>\r\n            \r\n            <Chart ticker={selectedtext} stockprice={stockprice} setStockprice={setStockprice} />\r\n            \r\n            <div class='form'>\r\n                <div class='priceinput'>\r\n                    <label>Estimated Stock Price:</label>\r\n                    <input class='pricebox' type='text' value={expprice} placeholder='100.00' onChange={(e) => {setExpprice(e.target.value)}} /> \r\n                </div>\r\n                <div class='dateinput'>\r\n                    <label>Date:</label>\r\n                    <input class='datebox' type='date' value={date} onChange={(e) => {setDate(e.target.value)}} />   \r\n                </div>\r\n                <button class='submitparams' onClick={submitparams}>Go</button> \r\n            </div>\r\n            \r\n            <Result ticker={selectedtext} pricestring={selectedexpprice} date={selecteddate} currentprice={stockprice}/>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Body","import React, {useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter, Route} from 'react-router-dom'\n\nimport Header from \"./components/Header\"\nimport Body from \"./components/Body\"\n\nimport './style/style.css'\n\nconst App = () => {\n\n  return (\n    <div id='app'>\n      <BrowserRouter>\n        <Header />\n        <Body />\n      </BrowserRouter>\n    </div>\n  )\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}